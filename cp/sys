clear;clc;
% randn('state',100);
% rand('state',100);
format long;
load dLt.mat
load X-determined.mat
tic
T = 1000;
T_min = 1;
r = 0.999;
m = 1;  %% Size of generating data
n = 1;  %% Size of fitting data
k = 1001;  %% Size of itelation
dt = 0.001;  %% Time step
lamda = 0.05;
x_g = X(1:k,1:m);  %% Generating data
x_f = zeros(k,n)+0.5;  %% Fitting data
w = 0*ones(1,3);  %% Weight coefficients
% w = [0,0,0,-1,0,-1,1];
w_new = ones(1,3);

%% Initial
B1 = myfun1(x_f(1,:),dLt(1,:),1);
B2 = myfun1(x_f(1,:),dLt(1,:),2);
B3 = myfun1(x_f(1,:),dLt(1,:),3);
% B4 = myfun1(x_f(1,:),dLt(1,:),4);
% B5 = myfun1(x_f(1,:),dLt(1,:),5);
% B6 = myfun1(x_f(1,:),dLt(1,:),6);
% B7 = myfun1(x_f(1,:),dLt(1,:),7);

% x_f(2,:) = x_f(1,:) + w*[B1'*dt,B2'*dt,B3'*dt,B4'*dt,B5'*dt,B6'*dt,B7']'; 
x_f(2,:) = x_f(1,:) + w*[B1'*dt,B2'*dt,B3'*dt]'; 
z = 12345;
count = 0;
j = 1;
while(T > T_min)
   
    x_f = myfun2(x_f,w,k,dt,dLt);
    z = obj(x_f,x_g);
    w_new = w + lamda*(1-2*rand(1,3));  %% Simulate Anneal Method
%     w_new(1) = w(1) - lamda*(1-2*rand);
% w_new(1) = 0;
% w_new(2) = 1;
% w_new(3) = 0;
% w_new(5) = sqrt(0.3);
%     w_new(2) = w(2) - lamda*(1-2*rand);
%     w_new(3) = w(3) - lamda*(1-2*rand);
%     w_new(4) = w(4) - lamda*(rand);
%     w_new(5) = w(5) - lamda*(1-2*rand);
% w_new = w;
    x_f_new = myfun2(x_f,w_new,k,dt,dLt);
    if max(x_f_new(:))>10^5
            if j == 1
                w_new(j) = -w_new(j);
                j = j + 1;
%             else if j <= 7
            else
                w_new(j-1) = -w_new(j-1);
                w_new(j) = -w_new(j);
                j = j + 1;
%                 else if j == 1
%                     w_new(j) = -w_new(j);
%                     w_new(j+1) = -w_new(j+1);
%                     else
%                         w_new(j-1) = -w_new(j-1);
%                         w_new(j) = -w_new(j);
%                         w_new(j+1) = -w_new(j+1);
%                     end
%                 end
            end
        w = w_new;
        continue
    end
    j = 1;
    z_new = obj(x_f_new,x_g); %% Objective function
    dE = (z_new - z);
    if dE < 0  %% Replace with prob 1
        w = w_new;  %% Update
        z = z_new
%         x_f = x_f_new;
    end
    if dE >= 0
        rnd = rand;
        if exp(-dE/T) > rnd  %% Replace with prob 1-exp(dE/T)
            w = w_new;  %% Update
            z = z_new
%             x_f = x_f_new;
        end
    end
%     x_f = x_f_new;
    T = r*T;
    count = count + 1;
end
toc
w;
plot(0:.001:1,x_f,'r')
hold on 
plot(0:.001:1,x_g,'b')
axis([0,1,0,1])

%% ---Functions--- %%
%% Basis
function B = myfun1(x,dLt,index)
    [m,n] = size(x);
    switch index
        case 1
            B = ones(m,n);
        case 2
            B = x;
        case 3
            B = x.^2;
%         case 4
%             B = x.^3;
%         case 5
%             B = x.^4;
%         case 6
%             B = x.^5;
%         case 7
%             B = dLt;
    end
end

%% Calculating x_f
function x_f = myfun2(x_f,w,k,dt,dLt)
    for i = 2:k
        B1 = myfun1(x_f(i-1,:),dLt(i-1,:),1);
        B2 = myfun1(x_f(i-1,:),dLt(i-1,:),2);
        B3 = myfun1(x_f(i-1,:),dLt(i-1,:),3);
%         B4 = myfun1(x_f(i-1,:),dLt(i-1,:),4);
%         B5 = myfun1(x_f(i-1,:),dLt(i-1,:),5);
%         B6 = myfun1(x_f(i-1,:),dLt(i-1,:),6);
%         B7 = myfun1(x_f(i-1,:),dLt(i-1,:),7);
%         BB = [B1',B2',B3'];
%         BB = [ones(1,30)'*dt,x_f(i-1,:)'*dt,dLt(i-1,:)'];

%         x_f(i,:) = x_f(i-1,:) + w*[B1'*dt,B2'*dt,B3'*dt,B4'*dt,B5'*dt,B6'*dt,B7']'; 
        x_f(i,:) = x_f(i-1,:) + w*[B1'*dt,B2'*dt,B3'*dt]'; 
%         x_f(i,:) = x_f(i-1,:) + w*BB';
    end
end

%% Calculating objective function
function z = obj(x_f,x_g)
    [m,n] = size(x_f);
    tmp = abs((x_f - x_g)); %% 应为循环计算，否则x_f-x_g少算很多项a
    z = sum(sum(tmp,2)/n);
end

